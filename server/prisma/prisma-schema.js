module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateGlobal {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Global {
  departments: [String!]!
  campuses: [String!]!
  branches: [String!]!
  regs: Boolean
  regf: Boolean
  id: String!
  _id: ID!
}

type GlobalConnection {
  pageInfo: PageInfo!
  edges: [GlobalEdge]!
  aggregate: AggregateGlobal!
}

input GlobalCreatebranchesInput {
  set: [String!]
}

input GlobalCreatecampusesInput {
  set: [String!]
}

input GlobalCreatedepartmentsInput {
  set: [String!]
}

input GlobalCreateInput {
  departments: GlobalCreatedepartmentsInput
  campuses: GlobalCreatecampusesInput
  branches: GlobalCreatebranchesInput
  regs: Boolean
  regf: Boolean
  id: String
  _id: ID
}

type GlobalEdge {
  node: Global!
  cursor: String!
}

enum GlobalOrderByInput {
  regs_ASC
  regs_DESC
  regf_ASC
  regf_DESC
  id_ASC
  id_DESC
  _id_ASC
  _id_DESC
}

type GlobalPreviousValues {
  departments: [String!]!
  campuses: [String!]!
  branches: [String!]!
  regs: Boolean
  regf: Boolean
  id: String!
  _id: ID!
}

type GlobalSubscriptionPayload {
  mutation: MutationType!
  node: Global
  updatedFields: [String!]
  previousValues: GlobalPreviousValues
}

input GlobalSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GlobalWhereInput
  AND: [GlobalSubscriptionWhereInput!]
}

input GlobalUpdatebranchesInput {
  set: [String!]
}

input GlobalUpdatecampusesInput {
  set: [String!]
}

input GlobalUpdatedepartmentsInput {
  set: [String!]
}

input GlobalUpdateInput {
  departments: GlobalUpdatedepartmentsInput
  campuses: GlobalUpdatecampusesInput
  branches: GlobalUpdatebranchesInput
  regs: Boolean
  regf: Boolean
  id: String
}

input GlobalUpdateManyMutationInput {
  departments: GlobalUpdatedepartmentsInput
  campuses: GlobalUpdatecampusesInput
  branches: GlobalUpdatebranchesInput
  regs: Boolean
  regf: Boolean
  id: String
}

input GlobalWhereInput {
  regs: Boolean
  regs_not: Boolean
  regf: Boolean
  regf_not: Boolean
  id: String
  id_not: String
  id_in: [String!]
  id_not_in: [String!]
  id_lt: String
  id_lte: String
  id_gt: String
  id_gte: String
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  _id: ID
  _id_not: ID
  _id_in: [ID!]
  _id_not_in: [ID!]
  _id_lt: ID
  _id_lte: ID
  _id_gt: ID
  _id_gte: ID
  _id_contains: ID
  _id_not_contains: ID
  _id_starts_with: ID
  _id_not_starts_with: ID
  _id_ends_with: ID
  _id_not_ends_with: ID
  AND: [GlobalWhereInput!]
}

input GlobalWhereUniqueInput {
  id: String
  _id: ID
}

scalar Long

type Mutation {
  createGlobal(data: GlobalCreateInput!): Global!
  updateGlobal(data: GlobalUpdateInput!, where: GlobalWhereUniqueInput!): Global
  updateManyGlobals(data: GlobalUpdateManyMutationInput!, where: GlobalWhereInput): BatchPayload!
  upsertGlobal(where: GlobalWhereUniqueInput!, create: GlobalCreateInput!, update: GlobalUpdateInput!): Global!
  deleteGlobal(where: GlobalWhereUniqueInput!): Global
  deleteManyGlobals(where: GlobalWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  global(where: GlobalWhereUniqueInput!): Global
  globals(where: GlobalWhereInput, orderBy: GlobalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Global]!
  globalsConnection(where: GlobalWhereInput, orderBy: GlobalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GlobalConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  global(where: GlobalSubscriptionWhereInput): GlobalSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  username: String!
  password: String!
  name: String!
  campus: String!
  department: String!
  dob: DateTime
  email: String!
  level: Int!
  id: ID!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String!
  password: String!
  name: String!
  campus: String!
  department: String!
  dob: DateTime
  email: String!
  level: Int!
  id: ID
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  campus_ASC
  campus_DESC
  department_ASC
  department_DESC
  dob_ASC
  dob_DESC
  email_ASC
  email_DESC
  level_ASC
  level_DESC
  id_ASC
  id_DESC
}

type UserPreviousValues {
  username: String!
  password: String!
  name: String!
  campus: String!
  department: String!
  dob: DateTime
  email: String!
  level: Int!
  id: ID!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  username: String
  password: String
  name: String
  campus: String
  department: String
  dob: DateTime
  email: String
  level: Int
}

input UserUpdateManyMutationInput {
  username: String
  password: String
  name: String
  campus: String
  department: String
  dob: DateTime
  email: String
  level: Int
}

input UserWhereInput {
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  campus: String
  campus_not: String
  campus_in: [String!]
  campus_not_in: [String!]
  campus_lt: String
  campus_lte: String
  campus_gt: String
  campus_gte: String
  campus_contains: String
  campus_not_contains: String
  campus_starts_with: String
  campus_not_starts_with: String
  campus_ends_with: String
  campus_not_ends_with: String
  department: String
  department_not: String
  department_in: [String!]
  department_not_in: [String!]
  department_lt: String
  department_lte: String
  department_gt: String
  department_gte: String
  department_contains: String
  department_not_contains: String
  department_starts_with: String
  department_not_starts_with: String
  department_ends_with: String
  department_not_ends_with: String
  dob: DateTime
  dob_not: DateTime
  dob_in: [DateTime!]
  dob_not_in: [DateTime!]
  dob_lt: DateTime
  dob_lte: DateTime
  dob_gt: DateTime
  dob_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  level: Int
  level_not: Int
  level_in: [Int!]
  level_not_in: [Int!]
  level_lt: Int
  level_lte: Int
  level_gt: Int
  level_gte: Int
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`
      }
    