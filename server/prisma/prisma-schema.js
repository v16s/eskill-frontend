module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBranch {
  count: Int!
}

type AggregateCampus {
  count: Int!
}

type AggregateCourse {
  count: Int!
}

type AggregateGlobal {
  count: Int!
}

type AggregateQuestionAdd {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Branch {
  id: ID!
  name: String!
}

type BranchConnection {
  pageInfo: PageInfo!
  edges: [BranchEdge]!
  aggregate: AggregateBranch!
}

input BranchCreateInput {
  id: ID
  name: String!
}

type BranchEdge {
  node: Branch!
  cursor: String!
}

enum BranchOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type BranchPreviousValues {
  id: ID!
  name: String!
}

type BranchSubscriptionPayload {
  mutation: MutationType!
  node: Branch
  updatedFields: [String!]
  previousValues: BranchPreviousValues
}

input BranchSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BranchWhereInput
  AND: [BranchSubscriptionWhereInput!]
}

input BranchUpdateInput {
  name: String
}

input BranchUpdateManyMutationInput {
  name: String
}

input BranchWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [BranchWhereInput!]
}

input BranchWhereUniqueInput {
  id: ID
  name: String
}

type Campus {
  id: ID!
  admin_id: String!
  departments: [Tag!]
  name: String!
}

type CampusConnection {
  pageInfo: PageInfo!
  edges: [CampusEdge]!
  aggregate: AggregateCampus!
}

input CampusCreateInput {
  id: ID
  admin_id: String!
  departments: TagCreateManyInput
  name: String!
}

type CampusEdge {
  node: Campus!
  cursor: String!
}

enum CampusOrderByInput {
  id_ASC
  id_DESC
  admin_id_ASC
  admin_id_DESC
  name_ASC
  name_DESC
}

type CampusPreviousValues {
  id: ID!
  admin_id: String!
  name: String!
}

type CampusSubscriptionPayload {
  mutation: MutationType!
  node: Campus
  updatedFields: [String!]
  previousValues: CampusPreviousValues
}

input CampusSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CampusWhereInput
  AND: [CampusSubscriptionWhereInput!]
}

input CampusUpdateInput {
  admin_id: String
  departments: TagUpdateManyInput
  name: String
}

input CampusUpdateManyMutationInput {
  admin_id: String
  name: String
}

input CampusWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  admin_id: String
  admin_id_not: String
  admin_id_in: [String!]
  admin_id_not_in: [String!]
  admin_id_lt: String
  admin_id_lte: String
  admin_id_gt: String
  admin_id_gte: String
  admin_id_contains: String
  admin_id_not_contains: String
  admin_id_starts_with: String
  admin_id_not_starts_with: String
  admin_id_ends_with: String
  admin_id_not_ends_with: String
  departments_some: TagWhereInput
  departments_every: TagRestrictedWhereInput
  departments_none: TagRestrictedWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [CampusWhereInput!]
}

input CampusWhereUniqueInput {
  id: ID
  name: String
}

type Course {
  id: ID!
  branch: String!
  coordinator_id: String!
  name: String!
}

type CourseConnection {
  pageInfo: PageInfo!
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreateInput {
  id: ID
  branch: String!
  coordinator_id: String!
  name: String!
}

type CourseEdge {
  node: Course!
  cursor: String!
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  branch_ASC
  branch_DESC
  coordinator_id_ASC
  coordinator_id_DESC
  name_ASC
  name_DESC
}

type CoursePreviousValues {
  id: ID!
  branch: String!
  coordinator_id: String!
  name: String!
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
  AND: [CourseSubscriptionWhereInput!]
}

input CourseUpdateInput {
  branch: String
  coordinator_id: String
  name: String
}

input CourseUpdateManyMutationInput {
  branch: String
  coordinator_id: String
  name: String
}

input CourseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  branch: String
  branch_not: String
  branch_in: [String!]
  branch_not_in: [String!]
  branch_lt: String
  branch_lte: String
  branch_gt: String
  branch_gte: String
  branch_contains: String
  branch_not_contains: String
  branch_starts_with: String
  branch_not_starts_with: String
  branch_ends_with: String
  branch_not_ends_with: String
  coordinator_id: String
  coordinator_id_not: String
  coordinator_id_in: [String!]
  coordinator_id_not_in: [String!]
  coordinator_id_lt: String
  coordinator_id_lte: String
  coordinator_id_gt: String
  coordinator_id_gte: String
  coordinator_id_contains: String
  coordinator_id_not_contains: String
  coordinator_id_starts_with: String
  coordinator_id_not_starts_with: String
  coordinator_id_ends_with: String
  coordinator_id_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [CourseWhereInput!]
}

input CourseWhereUniqueInput {
  id: ID
  name: String
}

scalar DateTime

type Global {
  regs: Boolean
  regf: Boolean
  id: String!
  _id: ID!
}

type GlobalConnection {
  pageInfo: PageInfo!
  edges: [GlobalEdge]!
  aggregate: AggregateGlobal!
}

input GlobalCreateInput {
  regs: Boolean
  regf: Boolean
  id: String
  _id: ID
}

type GlobalEdge {
  node: Global!
  cursor: String!
}

enum GlobalOrderByInput {
  regs_ASC
  regs_DESC
  regf_ASC
  regf_DESC
  id_ASC
  id_DESC
  _id_ASC
  _id_DESC
}

type GlobalPreviousValues {
  regs: Boolean
  regf: Boolean
  id: String!
  _id: ID!
}

type GlobalSubscriptionPayload {
  mutation: MutationType!
  node: Global
  updatedFields: [String!]
  previousValues: GlobalPreviousValues
}

input GlobalSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GlobalWhereInput
  AND: [GlobalSubscriptionWhereInput!]
}

input GlobalUpdateInput {
  regs: Boolean
  regf: Boolean
  id: String
}

input GlobalUpdateManyMutationInput {
  regs: Boolean
  regf: Boolean
  id: String
}

input GlobalWhereInput {
  regs: Boolean
  regs_not: Boolean
  regf: Boolean
  regf_not: Boolean
  id: String
  id_not: String
  id_in: [String!]
  id_not_in: [String!]
  id_lt: String
  id_lte: String
  id_gt: String
  id_gte: String
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  _id: ID
  _id_not: ID
  _id_in: [ID!]
  _id_not_in: [ID!]
  _id_lt: ID
  _id_lte: ID
  _id_gt: ID
  _id_gte: ID
  _id_contains: ID
  _id_not_contains: ID
  _id_starts_with: ID
  _id_not_starts_with: ID
  _id_ends_with: ID
  _id_not_ends_with: ID
  AND: [GlobalWhereInput!]
}

input GlobalWhereUniqueInput {
  id: String
  _id: ID
}

scalar Long

type Mutation {
  createBranch(data: BranchCreateInput!): Branch!
  updateBranch(data: BranchUpdateInput!, where: BranchWhereUniqueInput!): Branch
  updateManyBranches(data: BranchUpdateManyMutationInput!, where: BranchWhereInput): BatchPayload!
  upsertBranch(where: BranchWhereUniqueInput!, create: BranchCreateInput!, update: BranchUpdateInput!): Branch!
  deleteBranch(where: BranchWhereUniqueInput!): Branch
  deleteManyBranches(where: BranchWhereInput): BatchPayload!
  createCampus(data: CampusCreateInput!): Campus!
  updateCampus(data: CampusUpdateInput!, where: CampusWhereUniqueInput!): Campus
  updateManyCampuses(data: CampusUpdateManyMutationInput!, where: CampusWhereInput): BatchPayload!
  upsertCampus(where: CampusWhereUniqueInput!, create: CampusCreateInput!, update: CampusUpdateInput!): Campus!
  deleteCampus(where: CampusWhereUniqueInput!): Campus
  deleteManyCampuses(where: CampusWhereInput): BatchPayload!
  createCourse(data: CourseCreateInput!): Course!
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateManyCourses(data: CourseUpdateManyMutationInput!, where: CourseWhereInput): BatchPayload!
  upsertCourse(where: CourseWhereUniqueInput!, create: CourseCreateInput!, update: CourseUpdateInput!): Course!
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
  createGlobal(data: GlobalCreateInput!): Global!
  updateGlobal(data: GlobalUpdateInput!, where: GlobalWhereUniqueInput!): Global
  updateManyGlobals(data: GlobalUpdateManyMutationInput!, where: GlobalWhereInput): BatchPayload!
  upsertGlobal(where: GlobalWhereUniqueInput!, create: GlobalCreateInput!, update: GlobalUpdateInput!): Global!
  deleteGlobal(where: GlobalWhereUniqueInput!): Global
  deleteManyGlobals(where: GlobalWhereInput): BatchPayload!
  createQuestionAdd(data: QuestionAddCreateInput!): QuestionAdd!
  updateQuestionAdd(data: QuestionAddUpdateInput!, where: QuestionAddWhereUniqueInput!): QuestionAdd
  updateManyQuestionAdds(data: QuestionAddUpdateManyMutationInput!, where: QuestionAddWhereInput): BatchPayload!
  upsertQuestionAdd(where: QuestionAddWhereUniqueInput!, create: QuestionAddCreateInput!, update: QuestionAddUpdateInput!): QuestionAdd!
  deleteQuestionAdd(where: QuestionAddWhereUniqueInput!): QuestionAdd
  deleteManyQuestionAdds(where: QuestionAddWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Obj {
  opt1: String!
  opt2: String!
  opt3: String!
  opt4: String!
  id: String!
}

input ObjCreateInput {
  opt1: String!
  opt2: String!
  opt3: String!
  opt4: String!
  id: String!
}

input ObjCreateManyInput {
  create: [ObjCreateInput!]
}

input ObjRestrictedWhereInput {
  opt1: String
  opt1_not: String
  opt1_in: [String!]
  opt1_not_in: [String!]
  opt1_lt: String
  opt1_lte: String
  opt1_gt: String
  opt1_gte: String
  opt1_contains: String
  opt1_not_contains: String
  opt1_starts_with: String
  opt1_not_starts_with: String
  opt1_ends_with: String
  opt1_not_ends_with: String
  opt2: String
  opt2_not: String
  opt2_in: [String!]
  opt2_not_in: [String!]
  opt2_lt: String
  opt2_lte: String
  opt2_gt: String
  opt2_gte: String
  opt2_contains: String
  opt2_not_contains: String
  opt2_starts_with: String
  opt2_not_starts_with: String
  opt2_ends_with: String
  opt2_not_ends_with: String
  opt3: String
  opt3_not: String
  opt3_in: [String!]
  opt3_not_in: [String!]
  opt3_lt: String
  opt3_lte: String
  opt3_gt: String
  opt3_gte: String
  opt3_contains: String
  opt3_not_contains: String
  opt3_starts_with: String
  opt3_not_starts_with: String
  opt3_ends_with: String
  opt3_not_ends_with: String
  opt4: String
  opt4_not: String
  opt4_in: [String!]
  opt4_not_in: [String!]
  opt4_lt: String
  opt4_lte: String
  opt4_gt: String
  opt4_gte: String
  opt4_contains: String
  opt4_not_contains: String
  opt4_starts_with: String
  opt4_not_starts_with: String
  opt4_ends_with: String
  opt4_not_ends_with: String
  id: String
  id_not: String
  id_in: [String!]
  id_not_in: [String!]
  id_lt: String
  id_lte: String
  id_gt: String
  id_gte: String
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  AND: [ObjRestrictedWhereInput!]
}

input ObjScalarWhereInput {
  opt1: String
  opt1_not: String
  opt1_in: [String!]
  opt1_not_in: [String!]
  opt1_lt: String
  opt1_lte: String
  opt1_gt: String
  opt1_gte: String
  opt1_contains: String
  opt1_not_contains: String
  opt1_starts_with: String
  opt1_not_starts_with: String
  opt1_ends_with: String
  opt1_not_ends_with: String
  opt2: String
  opt2_not: String
  opt2_in: [String!]
  opt2_not_in: [String!]
  opt2_lt: String
  opt2_lte: String
  opt2_gt: String
  opt2_gte: String
  opt2_contains: String
  opt2_not_contains: String
  opt2_starts_with: String
  opt2_not_starts_with: String
  opt2_ends_with: String
  opt2_not_ends_with: String
  opt3: String
  opt3_not: String
  opt3_in: [String!]
  opt3_not_in: [String!]
  opt3_lt: String
  opt3_lte: String
  opt3_gt: String
  opt3_gte: String
  opt3_contains: String
  opt3_not_contains: String
  opt3_starts_with: String
  opt3_not_starts_with: String
  opt3_ends_with: String
  opt3_not_ends_with: String
  opt4: String
  opt4_not: String
  opt4_in: [String!]
  opt4_not_in: [String!]
  opt4_lt: String
  opt4_lte: String
  opt4_gt: String
  opt4_gte: String
  opt4_contains: String
  opt4_not_contains: String
  opt4_starts_with: String
  opt4_not_starts_with: String
  opt4_ends_with: String
  opt4_not_ends_with: String
  id: String
  id_not: String
  id_in: [String!]
  id_not_in: [String!]
  id_lt: String
  id_lte: String
  id_gt: String
  id_gte: String
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  AND: [ObjScalarWhereInput!]
  OR: [ObjScalarWhereInput!]
  NOT: [ObjScalarWhereInput!]
}

input ObjUpdateManyDataInput {
  opt1: String
  opt2: String
  opt3: String
  opt4: String
  id: String
}

input ObjUpdateManyInput {
  create: [ObjCreateInput!]
  deleteMany: [ObjScalarWhereInput!]
  updateMany: [ObjUpdateManyWithWhereNestedInput!]
}

input ObjUpdateManyWithWhereNestedInput {
  where: ObjScalarWhereInput!
  data: ObjUpdateManyDataInput!
}

input ObjWhereInput {
  opt1: String
  opt1_not: String
  opt1_in: [String!]
  opt1_not_in: [String!]
  opt1_lt: String
  opt1_lte: String
  opt1_gt: String
  opt1_gte: String
  opt1_contains: String
  opt1_not_contains: String
  opt1_starts_with: String
  opt1_not_starts_with: String
  opt1_ends_with: String
  opt1_not_ends_with: String
  opt2: String
  opt2_not: String
  opt2_in: [String!]
  opt2_not_in: [String!]
  opt2_lt: String
  opt2_lte: String
  opt2_gt: String
  opt2_gte: String
  opt2_contains: String
  opt2_not_contains: String
  opt2_starts_with: String
  opt2_not_starts_with: String
  opt2_ends_with: String
  opt2_not_ends_with: String
  opt3: String
  opt3_not: String
  opt3_in: [String!]
  opt3_not_in: [String!]
  opt3_lt: String
  opt3_lte: String
  opt3_gt: String
  opt3_gte: String
  opt3_contains: String
  opt3_not_contains: String
  opt3_starts_with: String
  opt3_not_starts_with: String
  opt3_ends_with: String
  opt3_not_ends_with: String
  opt4: String
  opt4_not: String
  opt4_in: [String!]
  opt4_not_in: [String!]
  opt4_lt: String
  opt4_lte: String
  opt4_gt: String
  opt4_gte: String
  opt4_contains: String
  opt4_not_contains: String
  opt4_starts_with: String
  opt4_not_starts_with: String
  opt4_ends_with: String
  opt4_not_ends_with: String
  id: String
  id_not: String
  id_in: [String!]
  id_not_in: [String!]
  id_lt: String
  id_lte: String
  id_gt: String
  id_gte: String
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  AND: [ObjWhereInput!]
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  branch(where: BranchWhereUniqueInput!): Branch
  branches(where: BranchWhereInput, orderBy: BranchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Branch]!
  branchesConnection(where: BranchWhereInput, orderBy: BranchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BranchConnection!
  campus(where: CampusWhereUniqueInput!): Campus
  campuses(where: CampusWhereInput, orderBy: CampusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Campus]!
  campusesConnection(where: CampusWhereInput, orderBy: CampusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CampusConnection!
  course(where: CourseWhereUniqueInput!): Course
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  global(where: GlobalWhereUniqueInput!): Global
  globals(where: GlobalWhereInput, orderBy: GlobalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Global]!
  globalsConnection(where: GlobalWhereInput, orderBy: GlobalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GlobalConnection!
  questionAdd(where: QuestionAddWhereUniqueInput!): QuestionAdd
  questionAdds(where: QuestionAddWhereInput, orderBy: QuestionAddOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionAdd]!
  questionAddsConnection(where: QuestionAddWhereInput, orderBy: QuestionAddOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionAddConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type QuestionAdd {
  id: ID!
  course: String!
  name: String!
  desc: String!
  exp: String!
  opt: [Obj!]
  ans: String!
}

type QuestionAddConnection {
  pageInfo: PageInfo!
  edges: [QuestionAddEdge]!
  aggregate: AggregateQuestionAdd!
}

input QuestionAddCreateInput {
  id: ID
  course: String!
  name: String!
  desc: String!
  exp: String!
  opt: ObjCreateManyInput
  ans: String!
}

type QuestionAddEdge {
  node: QuestionAdd!
  cursor: String!
}

enum QuestionAddOrderByInput {
  id_ASC
  id_DESC
  course_ASC
  course_DESC
  name_ASC
  name_DESC
  desc_ASC
  desc_DESC
  exp_ASC
  exp_DESC
  ans_ASC
  ans_DESC
}

type QuestionAddPreviousValues {
  id: ID!
  course: String!
  name: String!
  desc: String!
  exp: String!
  ans: String!
}

type QuestionAddSubscriptionPayload {
  mutation: MutationType!
  node: QuestionAdd
  updatedFields: [String!]
  previousValues: QuestionAddPreviousValues
}

input QuestionAddSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QuestionAddWhereInput
  AND: [QuestionAddSubscriptionWhereInput!]
}

input QuestionAddUpdateInput {
  course: String
  name: String
  desc: String
  exp: String
  opt: ObjUpdateManyInput
  ans: String
}

input QuestionAddUpdateManyMutationInput {
  course: String
  name: String
  desc: String
  exp: String
  ans: String
}

input QuestionAddWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  course: String
  course_not: String
  course_in: [String!]
  course_not_in: [String!]
  course_lt: String
  course_lte: String
  course_gt: String
  course_gte: String
  course_contains: String
  course_not_contains: String
  course_starts_with: String
  course_not_starts_with: String
  course_ends_with: String
  course_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  exp: String
  exp_not: String
  exp_in: [String!]
  exp_not_in: [String!]
  exp_lt: String
  exp_lte: String
  exp_gt: String
  exp_gte: String
  exp_contains: String
  exp_not_contains: String
  exp_starts_with: String
  exp_not_starts_with: String
  exp_ends_with: String
  exp_not_ends_with: String
  opt_some: ObjWhereInput
  opt_every: ObjRestrictedWhereInput
  opt_none: ObjRestrictedWhereInput
  ans: String
  ans_not: String
  ans_in: [String!]
  ans_not_in: [String!]
  ans_lt: String
  ans_lte: String
  ans_gt: String
  ans_gte: String
  ans_contains: String
  ans_not_contains: String
  ans_starts_with: String
  ans_not_starts_with: String
  ans_ends_with: String
  ans_not_ends_with: String
  AND: [QuestionAddWhereInput!]
}

input QuestionAddWhereUniqueInput {
  id: ID
}

type Subscription {
  branch(where: BranchSubscriptionWhereInput): BranchSubscriptionPayload
  campus(where: CampusSubscriptionWhereInput): CampusSubscriptionPayload
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  global(where: GlobalSubscriptionWhereInput): GlobalSubscriptionPayload
  questionAdd(where: QuestionAddSubscriptionWhereInput): QuestionAddSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Tag {
  name: String!
  id: String!
}

input TagCreateInput {
  name: String!
  id: String!
}

input TagCreateManyInput {
  create: [TagCreateInput!]
}

input TagRestrictedWhereInput {
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  id: String
  id_not: String
  id_in: [String!]
  id_not_in: [String!]
  id_lt: String
  id_lte: String
  id_gt: String
  id_gte: String
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  AND: [TagRestrictedWhereInput!]
}

input TagScalarWhereInput {
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  id: String
  id_not: String
  id_in: [String!]
  id_not_in: [String!]
  id_lt: String
  id_lte: String
  id_gt: String
  id_gte: String
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
}

input TagUpdateManyDataInput {
  name: String
  id: String
}

input TagUpdateManyInput {
  create: [TagCreateInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyDataInput!
}

input TagWhereInput {
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  id: String
  id_not: String
  id_in: [String!]
  id_not_in: [String!]
  id_lt: String
  id_lte: String
  id_gt: String
  id_gte: String
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  AND: [TagWhereInput!]
}

type User {
  username: String!
  password: String!
  name: String!
  campus: String
  department: String
  dob: DateTime
  email: String!
  level: Int!
  id: ID!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String!
  password: String!
  name: String!
  campus: String
  department: String
  dob: DateTime
  email: String!
  level: Int!
  id: ID
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  campus_ASC
  campus_DESC
  department_ASC
  department_DESC
  dob_ASC
  dob_DESC
  email_ASC
  email_DESC
  level_ASC
  level_DESC
  id_ASC
  id_DESC
}

type UserPreviousValues {
  username: String!
  password: String!
  name: String!
  campus: String
  department: String
  dob: DateTime
  email: String!
  level: Int!
  id: ID!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  username: String
  password: String
  name: String
  campus: String
  department: String
  dob: DateTime
  email: String
  level: Int
}

input UserUpdateManyMutationInput {
  username: String
  password: String
  name: String
  campus: String
  department: String
  dob: DateTime
  email: String
  level: Int
}

input UserWhereInput {
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  campus: String
  campus_not: String
  campus_in: [String!]
  campus_not_in: [String!]
  campus_lt: String
  campus_lte: String
  campus_gt: String
  campus_gte: String
  campus_contains: String
  campus_not_contains: String
  campus_starts_with: String
  campus_not_starts_with: String
  campus_ends_with: String
  campus_not_ends_with: String
  department: String
  department_not: String
  department_in: [String!]
  department_not_in: [String!]
  department_lt: String
  department_lte: String
  department_gt: String
  department_gte: String
  department_contains: String
  department_not_contains: String
  department_starts_with: String
  department_not_starts_with: String
  department_ends_with: String
  department_not_ends_with: String
  dob: DateTime
  dob_not: DateTime
  dob_in: [DateTime!]
  dob_not_in: [DateTime!]
  dob_lt: DateTime
  dob_lte: DateTime
  dob_gt: DateTime
  dob_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  level: Int
  level_not: Int
  level_in: [Int!]
  level_not_in: [Int!]
  level_lt: Int
  level_lte: Int
  level_gt: Int
  level_gte: Int
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  username: String
  id: ID
}
`
      }
    